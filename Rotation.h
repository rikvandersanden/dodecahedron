#ifdef ARDUINO
  #include "Arduino.h"
#else
  #include <cstdint>
#endif

#include "Dodecahedron.h"
#include "Edge.h"

#ifndef Rotation_h
#define Rotation_h

static const uint16_t ANGLES[] = { 
0, 0, 0, 0, 0, 0, 0,
504, 1512, 2520, 3528, 4536, 5544, 6552,
7621, 8752, 9882, 11013, 12144, 13274, 14405,
15462, 16444, 17426, 18408, 19390, 20372, 21354,
22336, 23318, 24300, 25282, 26264, 27246, 28228,
28518, 28114, 27711, 27307, 26903, 26500, 26096,
25316, 24159, 23003, 21845, 20689, 19533, 18376,
17306, 16324, 15342, 14360, 13378, 12396, 11414,
10432, 9450, 8468, 7486, 6504, 5522, 4540,
3468, 2312, 1156, 0, 64379, 63222, 62065,

61286, 60882, 60479, 60075, 59671, 59268, 58864,
58084, 56927, 55771, 54613, 53457, 52301, 51144,
50364, 49960, 49556, 49152, 48749, 48345, 47941,
48230, 49212, 50194, 51176, 52158, 53140, 54122,
54613, 54613, 54613, 54613, 54613, 54613, 54613,
32767, 32767, 32767, 32767, 32767, 32767, 32767,
33259, 34241, 35223, 36205, 37187, 38169, 39151,
39441, 39037, 38634, 38230, 37826, 37423, 37019,
37308, 38290, 39272, 40254, 41236, 42218, 43200,
43690, 43690, 43690, 43690, 43690, 43690, 43690,

21845, 21845, 21845, 21845, 21845, 21845, 21845,
15172, 15576, 15980, 16384, 16787, 17191, 17595,
10922, 10922, 10922, 10922, 10922, 10922, 10922,
55104, 56086, 57068, 58050, 59032, 60014, 60996,
4263, 4693, 5122, 5552, 5982, 6411, 6841,
65045, 64063, 63081, 62099, 61117, 60135, 59153,
50074, 49092, 48110, 47128, 46146, 45164, 44182,
36239, 35082, 33925, 32767, 31612, 30455, 29298,
26385, 27367, 28349, 29331, 30313, 31295, 32277,
40220, 41377, 42533, 43690, 44847, 46003, 47160 };

static const uint8_t SATURATION[] = { 18, 54, 91, 127, 163, 200, 236 };

int16_t getAngleDifference(uint16_t a, uint16_t b)
{
    return 32767 - abs(abs(a - b) - 32767);
}

uint8_t getSaturation(uint8_t led)
{
    uint8_t edge = led / LEDS_PER_EDGE;
    if (edge == 0 || edge == 20 || edge == 15)
    {
		    return SATURATION[led % LEDS_PER_EDGE];
    }
    if (edge == 14 || edge == 19 || edge == 22)
    {
        return SATURATION[(LEDS_PER_EDGE-1) - (led % LEDS_PER_EDGE)];
    }
    return 255;
}

#endif
